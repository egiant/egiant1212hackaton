{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","index.js"],"names":["Info","React","Component","Form","onSubmit","this","props","weatherMethod","type","name","placeholder","Weather","city","country","temp","pressure","sunset","error","KEY","App","state","undefined","gettingWeather","e","a","preventDefault","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunset_Date","getHours","getMinutes","setState","main","className","bridge","send","ReactDOM","render","document","getElementById"],"mappings":"+eAYeA,G,8KARP,OACI,6BACI,6D,GAJGC,IAAMC,YCWVC,E,uKATP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,eACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,8H,GALGT,IAAMC,WCgCVS,EAhCC,SAACL,GAAD,OACR,6BACMA,EAAMM,MACR,6BACI,oHAAoBN,EAAMM,KAA1B,KAAkCN,EAAMO,SACxC,kGAAiBP,EAAMQ,MACvB,gFAAcR,EAAMS,UACpB,mGAAkBT,EAAMU,SAG5B,2BAAIV,EAAMW,SCChBC,EAAM,mCAmEGC,E,4MA/DXC,MAAQ,CACJN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,WAAOI,G,EAGXC,e,uCAAiB,WAAOC,GAAP,yBAAAC,EAAA,yDACbD,EAAEE,mBACIb,EAAOW,EAAEG,OAAOC,SAASf,KAAKgB,OAFvB,iCAMTC,MAAM,oDAAD,OAAqDjB,EAArD,qBAAsEM,EAAtE,4BANI,cAKHY,EALG,gBAQUA,EAAQC,OARlB,OAQHC,EARG,OAULhB,EAASgB,EAAKC,IAAIjB,QAClBkB,EAAO,IAAIC,MACVC,QAAQpB,GACTqB,EAAcH,EAAKI,WAAa,IAAMJ,EAAKK,aAE/C,EAAKC,SAAS,CACV1B,KAAMkB,EAAKS,KAAK3B,KAChBF,KAAMoB,EAAKvB,KACXI,QAASmB,EAAKC,IAAIpB,QAClBE,SAAUiB,EAAKS,KAAK1B,SACpBC,OAAQqB,EACRpB,WAAOI,IArBF,wBAwBT,EAAKmB,SAAS,CACV1B,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,YAAQK,EACRJ,MAAO,qIA9BF,4C,6GAoCb,OACI,yBAAKyB,UAAU,WACX,sCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMnC,cAAeF,KAAKiB,iBAC1B,kBAAC,EAAD,CACIR,KAAMT,KAAKe,MAAMN,KACjBF,KAAMP,KAAKe,MAAMR,KACjBC,QAASR,KAAKe,MAAMP,QACpBE,SAAUV,KAAKe,MAAML,SACrBC,OAAQX,KAAKe,MAAMJ,OACnBC,MAAOZ,KAAKe,MAAMH,a,GA1DpBhB,IAAMC,WCJxByC,IAAOC,KAAK,gBAEZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.61b80f31.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Info extends React.Component {\n    render() {\n        return(\n            <div>\n                <h2>Инфа</h2>\n            </div>\n        );\n    }\n}\n\nexport default Info;","import React from \"react\";\n\nclass Form extends React.Component {\n    render() {\n        return(\n            <form onSubmit={this.props.weatherMethod}>\n                <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\n                <button>Получить погоду</button>\n            </form>\n        );\n    }\n}\n\nexport default Form;","import React from \"react\";\n\nconst Weather = (props) => (\n        <div>\n            { props.city &&\n            <div>\n                <p>Местоположение: {props.city}, {props.country}</p>\n                <p>Температура: {props.temp}</p>\n                <p>Давление: {props.pressure}</p>\n                <p>Заход солнца: {props.sunset}</p>\n                </div>\n            }\n            <p>{props.error}</p>\n        </div>\n    ); ///если параметр один то можно убрать круглые скобки\n\n// class Weather extends React.Component {\n//     render() {\n//         return(\n//             <div>\n//                 { this.props.city &&\n//                 <div>\n//                     <p>Местоположение: {this.props.city}, {this.props.country}</p>\n//                     <p>Температура: {this.props.temp}</p>\n//                     <p>Давление: {this.props.pressure}</p>\n//                     <p>Заход солнца: {this.props.sunset}</p>\n//                     </div>\n//                 }\n//                 <p>{this.props.error}</p>\n//             </div>\n//         );\n//     }\n// }\n\nexport default Weather;","import React, { useState, useEffect } from 'react';\nimport bridge from '@vkontakte/vk-bridge';\nimport View from '@vkontakte/vkui/dist/components/View/View';\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner';\nimport '@vkontakte/vkui/dist/vkui.css';\n\n// import Home from './panels/Home';\n// import Persik from './panels/Persik';\n\nimport Info from \"./components/info\"\nimport Form from \"./components/form\"\nimport Weather from \"./components/weather\"\n\nconst KEY = \"e45b4f1021dbdc535d662231550c93af\";\n\nclass App extends React.Component {\n\n    state = {\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        pressure: undefined,\n        sunset: undefined,\n        error: undefined\n    }\n\n    gettingWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        \n        if(city) {\n            const api_url = await\n            fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},ru&appid=${KEY}&units=metric\n        `);\n            const data = await api_url.json();\n\n            var sunset = data.sys.sunset;\n            var date = new Date();\n            date.setTime(sunset);\n            var sunset_Date = date.getHours() + \":\" + date.getMinutes();\n\n            this.setState({\n                temp: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                pressure: data.main.pressure,\n                sunset: sunset_Date,\n                error: undefined\n            });\n        } else {\n            this.setState({\n                temp: undefined,\n                city: undefined,\n                country: undefined,\n                pressure: undefined,\n                sunset: undefined,\n                error: \"Введите название города\"\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <div>Hello</div>\n                <Info />\n                <Form weatherMethod={this.gettingWeather} />\n                <Weather \n                    temp={this.state.temp}\n                    city={this.state.city}\n                    country={this.state.country}\n                    pressure={this.state.pressure}\n                    sunset={this.state.sunset}\n                    error={this.state.error}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n// const App = () => {\n// \tconst [activePanel, setActivePanel] = useState('home');\n// \tconst [fetchedUser, setUser] = useState(null);\n// \tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />);\n\n// \tuseEffect(() => {\n// \t\tbridge.subscribe(({ detail: { type, data }}) => {\n// \t\t\tif (type === 'VKWebAppUpdateConfig') {\n// \t\t\t\tconst schemeAttribute = document.createAttribute('scheme');\n// \t\t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light';\n// \t\t\t\tdocument.body.attributes.setNamedItem(schemeAttribute);\n// \t\t\t}\n// \t\t});\n// \t\tasync function fetchData() {\n// \t\t\tconst user = await bridge.send('VKWebAppGetUserInfo');\n// \t\t\tsetUser(user);\n// \t\t\tsetPopout(null);\n// \t\t}\n// \t\tfetchData();\n// \t}, []);\n\n// \tconst go = e => {\n// \t\tsetActivePanel(e.currentTarget.dataset.to);\n// \t};\n\n// \treturn (\n// \t\t<View activePanel={activePanel} popout={popout}>\n// \t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} />\n// \t\t\t<Persik id='persik' go={go} />\n// \t\t</View>\n// \t);\n// }\n\n// export default App;\n\n","import \"core-js/features/map\";\nimport \"core-js/features/set\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport bridge from \"@vkontakte/vk-bridge\";\nimport App from \"./App\";\n\n//import 'bootstrap/dist/css/bootstrap.min.css';\n//import './App.css';\n\n// Init VK  Mini App\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {}); //runtime download\n}\n"],"sourceRoot":""}